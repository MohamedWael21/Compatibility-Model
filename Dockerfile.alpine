# Multi-stage build with Alpine Linux for minimal size
FROM python:3.11-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    gcc \
    musl-dev \
    linux-headers

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Final stage
FROM python:3.11-alpine

# Install only runtime dependencies
RUN apk add --no-cache \
    libc6-compat \
    ffmpeg \
    && rm -rf /var/cache/apk/*

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set work directory
WORKDIR /app

# Copy only necessary application files
COPY main.py .
COPY model.py .
COPY milvus_helper.py .
COPY best_siamese_model.pth .

# Expose the port the app runs on
EXPOSE 8080

# Set environment variables for Flask
ENV FLASK_APP=main.py
ENV FLASK_ENV=production

# Start the app with gunicorn
CMD ["gunicorn", "-b", "0.0.0.0:8080", "main:app", "--timeout", "120"] 